　　　　首先，在本地端，先安装git客户端　：apt-get install git
       接着，就可以使用：新建项目文件如...../work_git
                      切换到该文件夹下
                      git init 初始化操作
                      在该文件夹下增加文件文件夹之后，或者修改文件后，用：git add ．或者git add filename,或者git add -all
                      提交：git commit -m "info"
                      
            其他命令：
            
            
            
    提交到远程仓库：在注册好git 账号后
 １   先配置本地用户名和邮箱地址：git config --global user.name "xxx"
                           git config --global user.email "邮箱地址"
                           或者直接在$HOME/下的.gitconfig文件（git的本地全局配置文件）修改：
    　　　　　　　　[user]
	　　　　　　　　　　　　　　　　user = xdksx
	　　　　　　　　　　　　　　　　email = xxxxxx@qq.com

 ２  配置公钥使得能提交到远程仓库  
     由于其使用的是ssh的方式：
　　　　所以先创建验证的公钥：ssh-keygen -C '你的邮箱地址' -t rsa
　　　　　　此时会在用户目录下~/.ssh/建立相应的秘钥文件
　　　　　　cd 进入　　　cd ~/.ssh   使用gedit id_rsa.pub打开该文件，将内容（ssh公钥）复制．
　　　　打开github官网，进入自己的setting，选择ssh，增加新ssh key，粘贴刚才复制的并提交
　　　　　　　使用命令ssh -T git@git.oschina.net测试是否成功
（附加，可选步骤: 添加密钥到ssh-agent
		确保 ssh-agent 是可用的。ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，其实ssh-agent就是一个密钥管理器，运行ssh-agent以 后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。
		
		    # start the ssh-agent in the background
		    eval "$(ssh-agent -s)"
		    Agent pid 59566
		
		添加生成的 SSH key 到 ssh-agent。
		
		    $ ssh-add ~/.ssh/id_rsa
		
		)


３　提交到远程仓库：
注意每次都要git add　. ->git commit -m "..."-> git remote add origin https://git.oschina.net/xdksx/learngit.git-> git push origin master

把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
git push -u origin master

在配置了url之后，remote 步骤可以省略
配置可分全局配置和当前仓库配置：建议选择后者，灵活
全局配置：[remote "origin"]
	url = git@github.com:xdksx/search_engin.git
	fetch=+refs/heads/*:refs/remotes/origin/*
当前：切换到当前项目目录的.git/ 根据需要修改文件config并添加类似上述两行
之后就不用remote了



４可能出现的问题：
a   everything is up-to-date:这是因为上面步骤没有全，如只单独提交或者push．或者现修改文件，再完整步骤走一遍
b　　　 github 报sign_and_send_pubkey: signing failed: agent refused operation错误解决 ：
　　　　　t@localhost .ssh$ ssh -vT git@github.com
	OpenSSH_7.2p2, OpenSSL 1.0.2h-fips  3 May 2016
	...
	sign_and_send_pubkey: signing failed: agent refused operation
	...
	Permission denied (publickey).
	
	t@localhost .ssh$ eval "$(ssh-agent -s)"
	Agent pid 6894
	t@localhost .ssh$ ssh -vT git@github.com
	OpenSSH_7.2p2, OpenSSL 1.0.2h-fips  3 May 2016
	
	Hi talenhao! You've successfully authenticated, but GitHub does not provide shell access.
	debug1: channel 0: free: client-session, nchannels 1
	Transferred: sent 2672, received 1776 bytes, in 0.8 seconds
	Bytes per second: sent 3418.5, received 2272.2
	debug1: Exit status 1
	t@localhost .ssh$
	
	
	参考:
	https://help.github.com/articles/error-agent-admitted-failure-to-sign/ 
	　　　　
	
	
	
	git 的一些配置参考：
	 自定义Git环境

Git提供git 的配置工具，它允许设置配置变量。 Git会把所有的全局配置.gitconfig 文件位于主目录。要设置这些为全局配置值，添加 -global选项，如果省略 -global选项，那么配置是具体当前的Git存储库。

还可以设置系统范围内的配置。 Git存储这些值是在/etc/gitconfig文件，其中包含的配置系统上的每一个用户和资源库。要设置这些值，必须有root权限，并使用 -system 选项。

上面的代码编译和执行时，它会产生以下结果：
设置用户名

此信息用于Git的每个提交。

[jerry@CentOS project]$ git config --global user.name "Jerry Mouse"


设置电子邮件ID

此信息用于Git的每个提交。

[jerry@CentOS project]$ git config --global user.email "jerry@yiibai.com"


避免PULLING提交合并 

先从远程资源库的最新变化，如果这些变化是不同的，默认情况下，Git 创建合并提交。我们可以通过以下设置来避免这种。

jerry@CentOS project]$ git config --global branch.autosetuprebase always


颜色高亮

下面的命令使颜色突出显示在控制台的Git。

[jerry@CentOS project]$ git config --global color.ui true

[jerry@CentOS project]$ git config --global color.status auto

[jerry@CentOS project]$ git config --global color.branch auto


设置默认编辑器

默认情况下，Git的使用系统默认取自VISUAL或EDITOR环境变量的编辑器。我们可以设定一个不同的使用git 配置。

[jerry@CentOS project]$ git config --global core.editor vim


设置默认的合并工具

Git不会提供一个默认的合并工具整合到工作树冲突的更改。我们可以设置默认的合并工具，通过启用以下设置。

[jerry@CentOS project]$ git config --global merge.tool vimdiff


列出GIT设置

为了验证自己的Git设置本地存储库使用git 的config-list命令，如下所示。

[jerry@CentOS ~]$ git config --list

上面的命令会产生以下结果。

user.name=Jerry Mouse
user.email=jerry@yiibai.com
push.default=nothing
branch.autosetuprebase=always
color.ui=true
color.status=auto
color.branch=auto
core.editor=vim
merge.tool=vimdiff



